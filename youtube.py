from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.options import Options
from datetime import datetime
import pandas as pd
import csv
import time

channels = [[],[]]
fail_counter = 0
start_pos = 0 # might be easier when running to keep start_pos as 0
counter = start_pos
number = 1000 # point to force stop, useful for sampling?
end_pos = start_pos + number
countries = []


csv_file_path = r'sub_list\subscriptions.csv'
with open(csv_file_path, newline='', encoding="utf8") as csvfile:
    
    reader = csv.reader(csvfile)
    next(reader, None) # skips header
    
    for row in reader:
        if row == []:
            break
        
        channels[0].append(row[1] + '/about')   # urls
        channels[1].append(row[2])              # names

path = r'...\...\chromedriver-win64\chromedriver'
chrome_options = Options()
chrome_options.add_argument("--headless")

cookies_rejected = False
# xpath syntax: //tagName[@AttributeName="value"]
last_row_xpath = "//tr[@class='description-item style-scope ytd-about-channel-renderer'][last()]//td"

print("Started scraping at:", datetime.now())
try:
    while counter < len(channels[0]):
        # check if "- Topic"
        # in channel name and then check if auto generated
        
        ####################################
        
        # does following for every url
        if not cookies_rejected:
            driver = webdriver.Chrome(path, options=chrome_options)
        website = channels[0][counter]
        driver.get(website)
        
        
        if not cookies_rejected:
            last_reject_cookies = driver.find_element_by_xpath('//button[@aria-label="Reject all"][last()]')
            last_reject_cookies.click()
            cookies_rejected = True
            
        if fail_counter < 10:
            time.sleep(4) # may need to wait/load
        else:
            time.sleep(fail_counter/2)
            # more longer loads if fails
        
        try:
            #check for globe
            driver.find_element_by_xpath(last_row_xpath + "//yt-icon//span//div//*[local-name() = 'svg']//*[local-name() = 'path']")
        except NoSuchElementException:
            # check why globe not visible
            # first whether channel still exists
            try:
                channel_check = (driver.find_element_by_xpath('//*[@id="container"]/yt-formatted-string')).get_attribute("innerHTML")
                
                if any(s in channel_check for s in ("This account has been terminated", "This channel was removed")):
                    countries.append("TERMINATED")
                    # copyright strikes or breaking TOS
                    counter+=1
                    print("channel has been terminated")
                elif ("This channel does not exist") in (channel_check):
                    countries.append("DELETED")
                    counter+=1
                    print("channel deleted by owner")
            except NoSuchElementException:
                pass
            
            try:
                channel_check = (driver.find_element_by_xpath('//*[@id="auto-generated"]')).get_attribute("innerHTML")
                # "Topic" channels for video games
                # topic channels for music load correctly
                if ("Auto-generated by YouTube") in (channel_check):
                    countries.append("AUTO_GEN")
                    counter+=1
                    print("Auto-generated channel")
            except NoSuchElementException:
                pass
            
            fail_counter += 1
            if fail_counter % 3 == 0:
                print("try again")
            
            if fail_counter == 15:
                end_pos = counter
                break
            continue
        
        country = driver.find_element_by_xpath(last_row_xpath + '[@class="style-scope ytd-about-channel-renderer"][last()]')
        if len(country.text) == 0:
            countries.append("N/A")
        else:
            countries.append((country.get_attribute("innerHTML")).replace("&amp;", "and"))
            #changes '&' in country names such as Trinidad and Tobago
        
        if ((counter % 100) == 0) and (counter > 0):
            print("passed another 100")
        print(country.text)
        counter+=1
        fail_counter = 0 # reset fail counter
        
        if counter == end_pos:
            end_pos = counter
            break
    else:
        if len(channels[0]) == 0:
            driver = webdriver.Chrome(path, options=chrome_options)
except Exception as e:
    print(e)
    print("exception encountered")
    print("current fail_counter:", fail_counter)
    print("current counter:", counter)
    end_pos = counter+1
####################################

print("ended at:", end_pos)
driver.quit()

print("Ending time:", datetime.now())

#plan: make into string array
#then add to rows of csv doc

# Step 1: Read the CSV file into a DataFrame
df = pd.read_csv(csv_file_path)

# Step 2: Define the values for the new column
full_column = []

for i in range(1, start_pos):
    full_column.append('')

for c in countries:
    full_column.append(c)

for i in range(start_pos+len(countries), len(channels[0]) ):
    full_column.append('')

# adds the countries and leaves all others blank

# Step 3: Add the new &quot;City&quot; column to the DataFrame
df['Countries'] = full_column

# Step 4: Write the DataFrame back to the CSV file
df.to_csv(r'sub_list\subs_out_test.csv', index=False)

print(countries)
